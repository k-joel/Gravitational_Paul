/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File:	"CPlayer.h"
//
// Author: Justin Dumas (JuD)
//
// Purpose: Declares the CPlayer class. This class will act as the in game avatar
//			for the player. This will get input to influence its motion. This will be derived from CGrav Object.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef DEF_C_PLAYER
#define DEF_C_PLAYER
#include "CGravObject.h"
#include "SGD Wrappers/CSGD_DirectInput.h"
#include "CGravWell.h"
//additional #includes here
#include "IListener.h"
//foreward declarations here

class CPlayer : public CGravObject , public IListener
{
private:

	CSGD_DirectInput*		m_pDI;
	CGravWell*				m_pPushWell;
	CGravWell*				m_pPullWell;
	CGravWell*				m_pShot;
	bool					m_bShotOut;
	D3DXVECTOR2				m_tShotVec;
	D3DXVECTOR2				m_tRelativeMousePt;
	bool					m_bLeftHeld;
	bool					m_bRightHeld;
	bool					m_bHasLanded;
	bool					m_bJustInWell;

	bool					m_bRTriggerHeld;
	bool					m_bLTriggerHeld;
	//temp for testing
	int						m_nCollideSound;
	float					m_fSoundTimer;
	float					m_fMovementTimer;
	bool					m_bControllerConnected;

	// platform collision
	CBaseObject*			m_pPlatform;

	//possibly add reticle sprite or animation in
	int						m_nTargetImageID;

	//Bool to kill blood particle
	bool					m_bKill;
	float					m_fKillTimer;

	//Term Vel bool to display falling to fast if set to true
	bool					m_bDying;
	float					m_fTrailTimer;

	bool					m_bFlashing;
	float					m_fFlashTimer;
	float					m_fFlashTick;
	int						m_nShieldID;
	bool					m_bInvisible;
public:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “constructor”
//
// Purpose: Creates the object with set valid values for use.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CPlayer();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “destructor”
//
// Purpose: Cleans up all memory for the object before deletion.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
~CPlayer();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Update”
//
// Purpose: Updates the player object based on time. This will call the input function and correct the shot
//			angle based on mouse cursor location
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Update(float fDT);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Render”
//
// Purpose: This will draw the player and aiming reticle to the screen.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Render();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “CollisionReact”
//
// Purpose: This will cause the player to move base don collisions with moving objects. This will also kill the player if they
//			are moving at a  high enough speed or the collision is with a hazard or enemy.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CollisionReact(int CollideObjType, int nAxis, float fSpeed);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Input”
//
// Purpose: Gathers input data to change the players actions on screen
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Input();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Respawn”
//
// Purpose: Respawns the player at the passed in location, and closing any wells they had open. This is usually called at death.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Respawn(D3DXVECTOR2 SpawnLoc);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “FirePushWell”
//
// Purpose: Fires a push well from the players location. Currently calls a CGamePlayState fucntion,
//			this will be turned into a message.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FirePushWell();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “FirePullWell”
//
// Purpose: Fires a pull well from the players location. Currently calls a CGamePlayState fucntion,
//			this will be turned into a message.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FirePullWell();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “CalcShotVec”
//
// Purpose: Calculates the shot angle for the player spawns and for the target retticle.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CalcShotVec();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “NullWell”
//
// Purpose: Terminates and Nulls the pointer to a well. THIS IS ONLY TO BE CALLED BY THE GRAVITY WELLS A PLAYER SPAWNS.
//			May Need to be a friend function??(break obj oriented?)
//			Same Bool as for setting well type applies, true = push, false = pull, they pass their type.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void NullWell(bool PushPull);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “HandleEvent”
//
// Purpose: This function reacts to in game events. This will let the player know when their gravity well changes state.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HandleEvent(CEvent* pEvent);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “TerminateWell”
//
// Purpose: This function checks if the well is one of the player's and if so, swaps it out/ terminates it. This will also make
//			sure no wells not in the player are attempted to be removed.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TerminateWell(CGravWell* deadWell);

RECT GetCollideRect();

void ShieldToggle(bool onOff);

//////////////////////////////////////////////////////////////////////////////////////////////////////
//  Function: Accessors
//
//  Purpose : Returns the specified type.
///////////////////////////////////////////////////////////////////////////////////////////////////////
D3DXVECTOR2 GetShotVec(){return m_tShotVec;}
D3DXVECTOR2 GetMousePt(){return m_tRelativeMousePt;}
CGravWell*	GetShot(){return m_pShot;}

//returns grav well of choice based on type bool push = true, pull = false
CGravWell* GetWell(bool PushPull);

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: Modifiers
//
//  Purpose: Modifies the specified type.
////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetShotVec(D3DXVECTOR2 newAngle){m_tShotVec = newAngle;}
void SetMousePt(float x, float y){m_tRelativeMousePt.x = x;m_tRelativeMousePt.y = y;}
void SetShot(CGravWell* newShot){m_pShot = newShot; if(newShot!= NULL)newShot->AddRef();}
void ShotDied(){m_pShot->Release(); m_pShot = NULL;}
void SetTargetImage(int newID){m_nTargetImageID = newID;}
void SetSoundID(int newID){m_nCollideSound = newID;}
void PlayerLanded(){m_bHasLanded = true;};
bool GetIsFlashing(){return m_bFlashing;}
//Sets a new well to the players push/pull (same bool as in accessor),
//also releases and closes old one if it was opened
void SetWell(bool PushPull, CGravWell* newWell);
void SetKill(bool kill) {m_bKill = kill;}
void SetPlatform(CBaseObject* p) {m_pPlatform = p;}
void HitFlash(){m_bFlashing = true; m_fFlashTimer = 0.0f;}
};
#endif