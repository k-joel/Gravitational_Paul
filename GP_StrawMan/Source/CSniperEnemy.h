/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File:	"CSniperEnemy.h"
//
// Author: Justin Dumas (JuD)
//
// Purpose: Declares a stationary sniper enemy class that will shoot player grav wells out of the sky. This will then be derived
//			into the bombardier.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef DEF_SNIPER_ENEMY
#define DEF_SNIPER_ENEMY

#include "CGravObject.h" //directly derives from GravObject
#include "CGame.h"
//sniper var #defines
#define DEFAULT_SNIPER_RANGE ((20.0f + (10.0f * CGame::GetInstance()->GetDifficulty())) * fTileSize)
#define DEFAULT_SNIPER_SHOTDELAY 2.0f - (0.5f * (CGame::GetInstance()->GetDifficulty() + 1))
#define	SNIPE_SHOT_SPEED (fGravShotSpeed * (2.0f + (-.5f * CGame::GetInstance()->GetDifficulty())))

//additional #includes here

//forward declarations here
class CGravWell;

class CSniper : public CGravObject
{
private:

	float			m_fGravResist;
	bool			m_bGravImmune;

	//Sniper specific vars

	D3DXVECTOR2		m_tBulletLoc;
	D3DXVECTOR2		m_tBulletVel;

	CGravWell*		m_pTargetWell;
	RECT			m_tTargetRect; //rect to track (so if the well closes while shot is en route the well isnt called again)

protected:
	//declared protected to allow the bombardier to use these freely
	bool			m_bShotOut;
	float			m_fShotDelay;
	float			m_fCurrentTime;
	int				m_nBulletImageID;
	float			m_fAttackRange;
	bool			m_bAuraSwitch;
	int				m_nAuraID;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Aim”
//
// Purpose: This function will be checked if the shot timer has passed, looking to see if the player has a Gravity well open in
//			range of the sniper. This is virtual as the bombardier will use a similar function.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
virtual void Aim(float fDT);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Fire”
//
// Purpose: This function will create and start the enemy's shot. While with snipers this will simply set the shot out to true
//			and begin their shot point, it will be derived to much more.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
virtual void Fire(D3DXVECTOR2 targetLoc);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “BulletCheck”
//
// Purpose: This function will act as an "update" of sorts. It will check the collision on the bullet point, as well as updating
//			it. This will terminate the pseudo bullet and reset the timer as well
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

virtual void BulletCheck(float fDT);

public:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “constructor”
//
// Purpose: This function creates the object and initializes its data members to inital, and usable values.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CSniper();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Destructor”
//
// Purpose: Called when the object leaves scope or is destroyed, this will clean up any memory or systemms asssociated with
//			the class before deleting them.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
virtual ~CSniper();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “overloaded constructor”
//
// Purpose: This overloaded constructor will take the type of children derived off of sniper, and set the type to that as it
//			initializes class variables.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CSniper(int nType);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Update”
//
// Purpose: This function will update the object based on time. As there is no motion for snipers, they will stop unless in a
//			well. This will als count down until they shoot again, and call the shot and bullet functions.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Update(float fDT);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Render”
//
// Purpose: This will draw the object to the screen based on the parent's interface. If there is a shot out as well, this will
//			be rendered to screen.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Render();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “CollisionReact”
//
// Purpose: This function will cause the enemy to react properly to the collision.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CollisionReact(int CollideObjType, int nAxis, float fSpeed);

bool CheckCollision(CBaseObject* pbj);

//////////////////////////////////////////////////////////////////////////////////////////////////////
//  Function: Accessors
//
//  Purpose : Returns the specified type.
///////////////////////////////////////////////////////////////////////////////////////////////////////
bool IsInAWell() {return m_bInWell;}
bool IsGravityImmune() {return m_bGravImmune;}
float	GetAttackRange() {return m_fAttackRange;}
float	GetResistance() {return m_fGravResist;}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: Modifiers
//
//  Purpose: Modifies the specified type.
////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetInWell(bool yesNo){m_bInWell = yesNo;}
void SetImmune(bool yesNo){m_bGravImmune = yesNo;}
void SetRange(float newRange){m_fAttackRange = newRange;}
void SetGravResist(float newResist){m_fGravResist = newResist;}
void SetBulletImage(int newID){m_nBulletImageID = newID;}
};

#endif