#pragma once 

#include "IGameState.h"
#include <string> 
using std::string; 

class CCheatState : public IGameState
{
private:
	string						m_cInvincible; 
	string						m_cLevels; 
	string						m_cGuns; 
	string						m_cCheat; 
	string						m_cCheat1; 
	string						m_cCheat2; 

	bool						m_bInvincible; 
	bool						m_bLevels; 
	bool						m_bGuns; 
	int							m_nSpot; 
	int							m_nSpot1; 
	int							m_nSpot2; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “constructor”
//
// Purpose: creates the class with usable inital memorya nd starting values
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CCheatState(); 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “destructor”
//
// Purpose: cleans up any memory needed and then destoys the class
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
   ~CCheatState(); 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Copy constructor”
//
// Purpose: Creates a new instance of the class from an old one. Declared priavte for singleton use.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CCheatState(const CCheatState&); 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “assignment operator”
//
// Purpose: copies one instance of the class to another. declared private for singlton use
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	CCheatState& operator = (const CCheatState&); 


public:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “GetInstance”
//
// Purpose: creates a static pointer to the only instance of the game state. Because all memory is cleared in Exit, this can
//			then be safely deleted at program end
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static CCheatState* GetInstance();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Enter”
//
// Purpose: Enters the GamePlay State, initializing the values to the needed level.
//			Once levels have been introduced, this will only load relvant resources
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Enter();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Input”
//
// Purpose: Gathers input from the user like the parent implementation. Calls specific game logic inputs
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Input();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Update”
//
// Purpose: Updates all game objects by time, including systems, and objects via the manager. This will progress the game
//			based on the logic, and call messages for progression or game over accoridingly
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Update(float fDT);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Render”
//
// Purpose: Draws active game objectss to the screen along with hud information
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Render();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Exit”
//
// Purpose: Unloads level and all relevant resources, updates CGame's player data accordingly
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Exit();

//Accessors for the cheat bools 
bool GetLevels() {return m_bLevels;}
bool GetGuns()   {return m_bGuns;}
bool GetInvincible() {return m_bInvincible;}


};