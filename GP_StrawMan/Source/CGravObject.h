/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File:	"CGravObject.h"
//
// Author: Justin Dumas (JuD)
//
// Purpose: Declares the GravObject class, derived from BaseObjects to be affected by gravity
//			This class will ask the gravity system for tis current and dynamic gravity.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef DEF_GRAV_OBJECT
#define DEF_GRAV_OBJECT

//included files
#include "CBaseObject.h" //derives from CBaseObject

class CGravSystem; // declaring grav system class for the pointer to check gravity

//objects affected by gravoty do not need much to make this change and so can easily derive from CBaseObject
class CGravObject : public CBaseObject
{
private:
protected:

		//pointer to gravity system. This is the only new data
		//a gravity object needs to store, as gravity is dynamic.
		CGravSystem*	m_pGS;
		bool			m_bInWell;
		bool			m_bOnGround;

public:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “constructor”
//
// Purpose: Similar to the base object constructor this will initialize values to usuable memory.
//			this will also call base object's constructor with a type appropriate for the child
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CGravObject();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “destructor”
//
// Purpose: Destroys and cleans up after the object, like in the parent
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
virtual ~CGravObject();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “overloaded constructor”
//
// Purpose: Overloads the contructor for grav object to call the parent constructors. This will pass the type value back to the
//			needed places.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CGravObject(int nType);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “Update”
//
// Purpose: Overloaded to also factor gravoty in the velocity update.
//			Will call check gravity each frame to get the current gravity.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Update(float fDT);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “CollisionReact”
//
// Purpose: This is overloaded as some grvaity collisons may result in wild movement. Handling these cases here will keep control
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CollisionReact(int CollideObjType, int nAxis, float fSpeed);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function: “CheckGravity”
//
// Purpose: This Will query the gravity system about the gravoty at the current location. The system will then return the vector
//			to be applied to the object's velocity.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
D3DXVECTOR2 CheckGravity();
};
#endif